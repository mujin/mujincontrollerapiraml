#%RAML 1.0 Overlay
masterRef: api.raml
title: MUJIN Controller API
description: |
  This document describes the HTTP API to interact with a MUJIN controller.

baseUriParameters:
  controller:
    description: Hostname or IP address of MUJIN controller

documentation:
  - title: URL
    content: |
      This API is based on HTTP protocol and can be accessed at port `80` on the controller. The URL for API access is any one of the following:

      - `http://controller123/api/v1/` where `controller123` is the controller name, this method will not work if DNS is not set up properly to resolve hostnames on the network
      - `http://192.168.0.1/api/v1/` where `192.168.0.1` is the IP address of the controller, this can be determined through the user interface of the controller

      You can try these method in a web browser, the web browser will prompt for username and password before allowing access. See the next section for details on how to authenticate when using this API.
  - title: Authentication
    content: |
      To use this API, client side software need to use **Basic authentication** to authenticate with HTTP server on the controller. This can be done by supplying the following HTTP header to the request:

      ```
      Authorization: Basic bXVqaW46bXVqaW4=
      ```

      Where `bXVqaW46bXVqaW4=` is a base64 string, encoding the username and password separated by a `:`, in this case `mujin:mujin`

traits:
  basicAuth:
    description: Authorization credentials encoded with base64
    headers:
      Authorization:
        displayName: Authorization credentials encoded with base64

types:
  Meta:
    properties:
      total_count:
        description: Total number of entries
      limit:
        description: Maximum number of entries to retrieve, used for pagination
      offset:
        description: Offset into the list of entries, used for pagination
      previous:
        description: Relative URI to fetch the previous page
      next:
        description: Relative URI to fetch the next page
  DebugResource:
    properties:
      pk:
        description: Primary key of debug resource
      resource_uri:
        description: Relative URI of debug resource
      description:
        description: Description of debug resource
      name:
        description: Name of debug resource, same as `pk`
      downloadUri:
        description: Relative URI to download debug resource
      datemodified:
        description: Timestamp of last modification
      size:
        description: Size of the debug resource, hint for downloading
  
  ResourceCollection:
    properties:
      objects:
        description: List of resources represented by dictionaries.
      meta:
        description: Meta information, e.g. number of resources, etc.
  
  BaseItemResource:
    properties:
      name:
        description: The name of the resource.
  BaseItemResourceGetResponse:
    properties:
      pk:
        description: The primary key that uniquely identifies the resource.
  BaseItemResourcePostRequest:
    properties:
      reference_pk:
        description: The primary key referencing the existing resource to be copied.
  # BaseItemResourcePutRequest:

  SceneResourceBase:
    properties:
      author:
        description: The author of the .dae used to create the scene resource.
      keywords:
        description: Scene resource description (TODO: expand).
  # SceneResourceGetResponse:
  # SceneResourcePostRequest:
  # SceneResourcePutRequest:

  # ObjectResourceBase:
  # ObjectResourceGetResponse:
  # ObjectReosurcePutRequest:

  LinkResourceBase:
    properties:
      parentlinkpk:
        description: The primary key referencing the link's parent link.
  # LinkResourceGetResponse:
  # LinkResourcePostRequest:
  # LinkResourcePutRequest:

  # AttachmentResourceBase:
  # AttachmentResourceGetResponse:
  # AttachmentResourcePostRequest:
  # AttachmentResourcePutRequest:

  GeometryResourceBase:
    properties:
      geomtype:
        description: The geometry type of the component, e.g. box, sphere, mesh.
      diffusecolor:
        description: The color of the component geometry.
  # GeometryResourceGetResponse:
  # GeometryResourcePostRequest:
  # GeometryResourcePutRequest:

  # IkParamResourceBase:
  # IkParamResourceGetResponse:
  # IkParamResourcePostRequest:
  # IkParamResourceGetRequest:

  GraspsetResourceBase:
    properties:
      ikparampks:
        description: Array of primary keys referencing IK parameter resources that defines the graspset.
  # GraspsetResourceGetResponse:
  # GraspsetResourcePostRequest:
  # GraspsetResourcePutRequest:

  # RobotResourceBase:
  # RobotResourceGetResponse:
  # RobotResourcePostRequest:

  # ToolResourceBase:
  # ToolResourceGetResponse:
  # ToolResourcePostRequest:
  # ToolResourcePutRequest:

  # AttachedSensorResourceBase:
  # AttachedSensorResourceGetResponse:
  # AttachedSensorResourcePostRequest:
  # AttachedSensorResourcePutRequest:

  # InstObjectResourceBase:
  # InstObjectResourceGetResponse:
  InstObjectResourcePostRequest:
    properties:
      type:
        description: Type of the instance object, e.g. 'object' for workpieces, etc. and 'robot' for robots.
  # InstObjectResourcePutRequest:

  # InstObjectResourceToolBase:
  # InstObjectResourceToolGetResponse:
  # InstObjectResourceToolPostRequest:
  # InstObjectResourceToolPutRequest:

resourceTypes:
  CollectionListResource:
    get:
      description: Retrieves a list of resources from the endpoint. List contents can be filtered based on query parameters.
    post:
      description: Creates and adds new resource to the endpoint based on user-sent JSON-serialized dictionary containing parameters for resource initialization.
    delete:
      description: Deletes specific resource at the endpoint based on user-specified resource pk.

  CollectionItemResource:
    get:
      description: Retrieves resource based on user-specified resource pk. Resource contents can be filtered base on query parameters.
    put:
      description: Modifies resource based on user-specified resource pk and user-sent JSON-serialized dictionary containing parameters for resource modification.

  ReadModifyOnlyItemResource:
    get:
      description: Retrieves resource based on user-specified resource pk. Resource contents can be filtered base on query parameters.
    put:
      description: Modifies resource based on user-specified resource pk and user-sent JSON-serialized dictionary containing parameters for resource modification.

/systeminfo/:
  displayName: System information

/systemstats/:
  displayName: System statistics

/interfaces/:
  displayName: Network interfaces

/upgrade/:
  displayName: Upgrade controller

/reboot/:
  displayName: Reboot controller

/halt/:
  displayName: Shutdown controller

/restartserver/:
  displayName: Restart planning server

/log/ordercycle/:
  displayName: Retrieve order cycle log (DEPRECATED)

/log/plcsignal/:
  displayName: Retrieve PLC signal log

/log/plcsignalanalysis/:
  displayName: Analayze PLC signal timing

/log/user/{category}/:
  displayName: Retrieve user logs

/config/:
  displayName: Configuration files

/signalmap:
  displayName: PLC signal maps

/backup/:
  displayName: Backup and restore

/query/barcodes/:
  displayName: Query scene based on barcode

/referenceobjectpks/:
  displayName: Manage referenced objects

/file:
  displayName: File management
  /upload/:
    post:
      displayName: Upload a file to controller
  /delete/:
    post:
      displayName: Delete a file on controller
  /list/:
    get:
      displayName: List files on controller
  /download/:
    get:
      displayName: Download a file from controller
    head:
      displayName: Peek at file metadata without downloading content

/api/v1/debug:
  displayName: Debug logs

/api/v1/scene:
  displayName: Scene resource (workplace simulation scene)
  description: |
    This endpoint contains the scene that holds the robot(s), the source and destination containers, and the workpiece(s).

/api/v1/scene/{scenepk}/instobject:
  displayName: Instance objects resource (simulation bodies)
  description:
    This endpoint contains all of the instance objects in the scene. Instance objects can either be kinetic bodies, e.g. containers, workpieces, or robots.
    Instance objects are instantiated from object templates and contain additional properties to differentiate instance objects from the same template.
    For example, robots instantiated from the same robot template may have differing base transforms from the origin that indicate robot base position.
    Refer to /object/{objectpk} documentation for more information on templates.

/api/v1/scene/{scenepk}/instobject/{instobjectpk}/tool:
  displayName: Instance object tools resource (robot manipulation tools)
  description: |
    This endpoint contains the tools of the object (robot). Instance object should be a robot to perform CRUD operations on this resource endpoint.
    Tools are instantiated from robot tools. See /robot/{robotpk} documentation for more information on tool templates. Instantiated tools are primarily used to fine-tune the positon of the robot end-effector (TODO: double-check correctness of statement).

/api/v1/object/{objectpk}:
  displayName: Object template resource (template for containers, workpieces, etc.)
  description: |
    This endpoint contains the template of an object, i.e. a kinematic body such as a container or workpiece from which instance objects are created.
    Templates contain all of the attributes, i.e. properties, common to all instance objects.
    Note that templates cannot be directly created. Templates are automatically generated when creating a instance object that does not refer to an existing template.

/api/v1/object/{objectpk}/link:
  displayName: Link resources (frame transformations)
  description: |
    This endpoint contains the links of an object. Links are frame transformations that define the positions of components relative to parent components.

/api/v1/object/{objectpk}/attachment:
  displayName: Attachment resources (revolute, linear, etc. joints)
  description: |
    This endpoint contains the attachments of an object. Attachments can be linear, revolute joints and are used to define the relationship between links.
    (TODO: double-check correctness of statement).

/api/v1/object/{objectpk}/geometry:
  displayName: Geometries resource (component geometries)
  description: |
    This endpoint contains the geometries of an object. Geometries are component geometries. Links and attachments define the position, and geometries define the shape of the components, e.g. robot arms.

/api/v1/object/{objectpk}/ikparam:
  displayName: IK parameter resources (destination coordinate points)
  description: |
    This endpoint contains the inverse kinematics parameters of an object that define the position of the robot end-manipulator, i.e. tool, when grabbing the object.

/api/v1/object/{objectpk}/graspset:
  displayName: Graspset resources (set of IK parameters for grasping objects, e.g. workpieces)
  description: |
    This endpoint contains the set of inverse kinematics parameters used to grab the object.

/api/v1/robot/{robotpk}:
  displayName: Robot template resource (template for robots)
  description: |
    This endpoint contains the template of a robot. Robot template inherits from object template and thus also has the same endpoints as /object template,
    e.g. /links, /attachments, /geometries, etc. Also note that this also means that robot template cannot be directly created.

/api/v1/robot/{robotpk}/tool:
  displayName: Tool resource (template for instance robot tools)
  description: |
    This endpoint contains the tools of a robot. Tools are frame transformations from the robot arm endpoint to the tool manipulator tip. Instanace tools are instantiated from robot tool templates (TODO: double-check correctness of statement).

/api/v1/robot/{robotpk}/attachedsensor:
  displayName: Attached sensor resources
  description: |
    This endpoint contains all sensors of the robot (TODO: expand on explanation).