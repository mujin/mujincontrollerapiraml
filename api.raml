#%RAML 1.0

title: MUJIN Controller API
baseUri: http://{controller}
baseUriParameters:
  controller: string
version: v1

traits:
  basicAuth:
    headers:
      Authorization:
        type: string
        example: Basic bXVqaW46bXVqaW4=
        required: true
  csrfToken:
    headers:
      X-CSRFToken:
        type: string
        example: token
        required: true
      Cookie:
        type: string
        example: csrftoken=token
        required: true

types:
  Meta:
    type: object
    properties:
      total_count: integer
      limit: integer
      offset: integer
      previous: string | nil
      next: string | nil
  DebugResource:
    type: object
    properties:
      pk: string
      resource_uri: string
      description: string
      name: string
      downloadUri: string
      datemodified: string
      size: integer

  # For type-checking and content validation for list of resources.
  ResourceCollection:
    type: object
    properties:
      objects: array
      meta: object

  # IMPORTANT:
  # ExampleResource*Base schema (type) is used for ExampleResource*Request and ExamplesResource*Response type inheritance.
  # ExampleResource*Request schema (type) is (ONLY) used for POST documentation.
  # ExampleResource*Response schema (type) is used for typing and content validation for specific resources.

  BaseItemResource:
    type: object
    properties:
      name: string
  BaseItemResourceRequest:
    type: BaseItemResource
    properties:
      reference_pk?: string
  BaseItemResourceResponse:
    type: BaseItemResource
    properties:
      pk: string
  
  SceneResourceBase:
    type: BaseItemResource
    properties:
      author?: string
      keywords?:
        type: string
        enum: ["'part,incomplete'", test]
  SceneResourceRequest:
    type: [BaseItemResourceRequest, SceneResourceBase]
    # In the future, can expand this section for POST-specific, scene-specific attributes
  SceneResourceResponse:
    type: [BaseItemResourceResponse, SceneResourceBase]
    # In the future, can expand this section for non-mutable attributes

  ObjectResourceBase:
    type: BaseItemResource
    # In the future, can expand this section to define common attributes for object template
  ObjectResourceRequest:
    type: [BaseItemResourceRequest, ObjectResourceBase]
    # In the future, can expand this section for POST-specific, object-specific attributes
  ObjectResourceResponse:
    type: [BaseItemResponseResponse, ObjectResourceBase]
    # In the future, can expand this section for non-mutable attributes

  LinkResourceBase:
    type: BaseItemResource
    properties:
      parentlinkpk?: string
    # In the future, can expand this section to define common attributes for links 
  LinkResourceRequest:
    type: [BaseItemResourceRequest, LinkResourceBase]
    properties:
      parentlinkpk:
        required: true
    # In the future, can expand this section for POST-specific, link-specific attributes
  LinkResourceResponse:
    type: [BaseItemResourceResponse, LinkResourceBase]
    # In the future, can expand this section for non-mutable attributes

  AttachmentResourceBase:
    type: BaseItemResource
    # In the future, can expand this section to define common attributes for attachments   
  AttachmentResourceRequest:
    type: [BaseItemResourceRequest, AttachmentResourceBase]
    # In the future, can expand this section to define POST-specific, attachment-specific attributes
  AttachmentResourceResponse:
    type: [BaseItemResourceResponse, AttachmentResourceBase]
    # In the future, can expand this section for non-mutable attributes

  GeometryResourceBase:
    type: BaseItemResource
    properties:
      linkpk?: string
      geomtype?:
        type: string
        enum: [box, sphere]
      diffusecolor?:
        type: array
        example: [1, 1, 0, 1]
    # In the future, can expand this section to define common attributes for geometries
  GeometryResourceBaseRequest:
    type: [BaseItemResourceRequest, GeometryResourceBase]
    properties:
      linkpk:
        required: true
      geomtype:
        required: true
    # In the future, can expand this section to define POST-specific, geometry-specific attributes
  GeometryResourceBaseResponse:
    diffusecolor: array
    type: [BaseItemResourceResponse, GeometryResourceBase]

  IkParamResourceBase:
    type: BaseItemResource
    # In the future, can expand this section to define common attributes for ikparam
  IkParamResourceRequest:
    type: [BaseItemResource, IkParamResourceBase]
    # In the future, can expand this section to define POST-specific, ikparam-specific attributes
  IkParamResourceResponse:
    type: [BaseItemResource, IkParamResourceBase]

  GraspsetResourceBase:
    type: BaseItemResource
    properties:
      ikparampks?: array
    # In the future, can expand this section to define common attributes for graspset
  GraspsetResourceRequest:
    type: [BaseItemResource, GraspsetResourceBase]
    # In the future, can expand this section to define POST-specific, graspset-specific attributes
  GraspsetResourceResponse:
    type: [BaseItemResource, GraspsetResourceBase]
  
  RobotResourceBase:
    type: BaseItemResource      
  RobotResourceRequest:
    type: [BaseItemResource, RobotResourceBase]
  RobotResourceResponse:
    type: [BaseItemResource, RobotResourceBase]

  ToolResourceBase:
    type: BaseItemResource
  ToolResourceRequest:
    type: [BaseItemResource, RobotResourceBase]
  ToolResourceResponse:
    type: [BaseItemResource, RobotResourceBase]

  AttachedSensorResourceBase:
    type: BaseItemResource
  AttachedSensorResourceRequest:
    type: [BaseItemResource, RobotResourceBase]
  AttachedSensorResourceResponse:
    type: [BaseItemResource, RobotResourceBase]

  InstObjectResourceBase:
    type: BaseItemResource
  InstObjectResourceRequest:
    type: [BaseItemResource, RobotResourceBase]
    properties:
      type?:
        type: string
        enum: [object, robot]
  InstObjectResourceResponse:
    type: [BaseItemResource, RobotResourceBase]

  InstObjectResourceToolBase:
    type: BaseItemResource
  InstObjectResourceToolRequest:
    type: [BaseItemResource, RobotResourceBase]
  InstObjectResourceToolResponse:
    type: [BaseItemResource, RobotResourceBase]

resourceTypes:
  CollectionListResource:
    is: [basicAuth]
    get:
      responses:
        200:
          body:
            application/json:
              type: ResourceCollection
    post:
      description: |
        Creates a new <<resourcePathName|!singularize>> and add to <<resourcePathName>> list.
        Request requires users to send JSON-serialized dictionary containing parameters for resource initialization.
        Refer to the "properties" section in the schema below for necessary and/or valid parameters for intialization.
        The following parameters are required for a minimally-defined resource: <<minimumParametersList>>
        Returns JSON response containing updated JSON representation of <<resourcePathName>> list.
      is: [csrfToken]
      body:
        application/json:
          type: <<resourceSchema>>
      responses:
        201:
          body:
            application/json:
              type: ResourceCollection
    delete:
      description: |
        Deletes specific resource using <<resourcePathName|!singularize>>pk.
        Note that user is not required to send any JSON-serialized dictionary and also does not receive JSON response.
      is: [csrfToken]
      responses:
        204:

  CollectionItemResource:
    is: [basicAuth]
    get:
      description: |
        Retrieves specific resource with <<resourcePathName|!singularize>>pk.
        Note that list contents can be filtered based on query parameters, i.e. modifying the headers.
        Refer to the "properties" section in the schema below for valid filters.
        Returns JSON representation of <<resourcePathName|!singularize>>pk of requested resource.
      body:
        application/json:
          type: <<resourceSchema>>
      responses:
        200:
          body:
            application/json:
              type: <<resourceSchema>>
    put:
      description: |
        Modifies specific resource <<resourcePathName|!singularize>> using <<resourcePathName|!singularize>>pk.
        Request requires users to send JSON-serialized dictionary containing parameters for resource modification.
        Refer to the "properties" section in the schema below for resource parameters that can be modified.
        Returns updated JSON representation of <<resourcePathName|!singularize>>pk after modification.
      is: [csrfToken]
      body:
        application/json:
          type: <<resourceSchema>>
      responses:
        202:
          body:
            application/json:
              type: <<resourceSchema>>

  ReadModifyOnlyItemResource:
    is: [basicAuth]
    get:
      description: |
        Retrieves specific resource with <<resourcePathName|!singularize>>pk.
        Note that list contents can be filtered based on query parameters, i.e. modifying the headers.
        Refer to the "properties" section in the schema below for valid filters.
        Returns JSON representation of <<resourcePathName|!singularize>>pk of requested resource.
      body:
        application/json:
          type: <<resourceSchema>>
      responses:
        200:
          body:
            application/json:
              type: <<resourceSchema>>
    put:
      description: |
        Modifies specific resource <<resourcePathName|!singularize>> using <<resourcePathName|!singularize>>pk.
        Request requires users to send JSON-serialized dictionary containing parameters for resource modification.
        Refer to the "properties" section in the schema below for resource parameters that can be modified.
        Returns updated JSON representation of <<resourcePathName|!singularize>>pk after modification.
      is: [csrfToken]
      body:
        application/json:
          type: <<resourceSchema>>
      responses:
        202:
          body:
            application/json:
              type: <<resourceSchema>>

/systeminfo/:
  is: [basicAuth]
  get:
    responses:
      200:
        body:
          application/json:
            type: object
            properties:
              hardware: string
              product: string
              id: string
            example: |
              {
                "hardware": "HARDWARE-MODEL",
                "product": "PRODUCT-ID",
                "id": "controller"
              }

/systemstats/:
  is: [basicAuth]
  get:
    responses:
      200:
        body:
          application/json:
            type: object
            properties:
              memory: object
              disk: object
              temperature: object[]
              cpu: object

/interfaces/:
  is: [basicAuth]
  get:
    responses:
      200:
        body:
          application/json:

/upgrade/:
  is: [basicAuth]
  get:
    responses:
      200:
  post:
    is: [csrfToken]
    responses:
      200:
  delete:
    is: [csrfToken]
    responses:
      200:

/reboot/:
  is: [basicAuth]
  post:
    is: [csrfToken]
    responses:
      200:

/halt/:
  is: [basicAuth]
  post:
    is: [csrfToken]
    responses:
      200:

/restartserver/:
  is: [basicAuth]
  post:
    is: [csrfToken]
    responses:
      200:

/log/ordercycle/:
  is: [basicAuth]
  get:

/log/plcsignal/:
  is: [basicAuth]
  get:

/log/plcsignalanalysis/:
  is: [basicAuth]
  get:

/log/user/{category}/:
  is: [basicAuth]
  get:

/config/:
  is: [basicAuth]
  get:
  put:
    is: [csrfToken]

/signalmap:
  is: [basicAuth]
  /:
    get:
  /{pk}/:
    get:
    put:
      is: [csrfToken]
    delete:
      is: [csrfToken]

/backup/:
  is: [basicAuth]
  get:
  post:
    is: [csrfToken]

/query/barcodes/:
  is: [basicAuth]
  get:

/referenceobjectpks/:
  is: [basicAuth]
  post:
    is: [csrfToken]

/file:
  /upload/:
    is: [basicAuth]
    post:
      is: [csrfToken]
      queryParameters:
        filename?: string
      body:
        multipart/form-data:
          properties:
            filename?: string
            file:
              required: true
              type: file
      responses:
        200:
          body:
            application/json:
              type: object
              properties:
                filename: string
                modified: number
                size: integer
  /delete/:
    is: [basicAuth]
    post:
      is: [csrfToken]
      queryParameters:
        filename: string
      responses:
        200:
          body:
            application/json:
              type: object
              properties:
                filename: string
  /list/:
    is: [basicAuth]
    get:
      responses:
        200:
          body:
            application/json:
              type: object
              properties:
                filename?:
                  type: object
                  properties:
                    modified: number
                    size: integer
              example: |
                {
                  "filename1.mujin.dae": {
                    "modified": 1565932929.9884703,
                    "size": 9938
                  }
                }
  /download/:
    is: [basicAuth]
    get:
      queryParameters:
        filename: string
      responses:
        302:
    head:
      queryParameters:
        filename: string
      responses:
        302:

/api/v1/:
  is: [basicAuth]
  get:
    responses:
      200:
        body:
          application/json:

/api/v1/debug:
  is: [basicAuth]
  /:
    get:
      responses:
        200:
          body:
            application/json:
              type: object
              properties:
                objects: DebugResource[]
                meta: Meta
              example: |
                {
                  "objects": [
                    {
                      "description": "System logs",
                      "name": "system-logs",
                      "downloadUri": "/api/v1/debug/system-logs/download/",
                      "pk": "system-logs",
                      "resource_uri": "/api/v1/debug/system-logs/",
                      "datemodified": "2020-03-19T15:07:42.633247+09:00",
                      "size": 125289232
                    }
                  ],
                  "meta": {
                    "total_count": 1,
                    "previous": null,
                    "limit": 20,
                    "offset": 0,
                    "next": null
                  }
                }
  /{pk}/:
    get:
      responses:
        200:
          body:
            application/json:
              type: DebugResource
              example:
                {
                  "description": "System logs",
                  "name": "system-logs",
                  "downloadUri": "/api/v1/debug/system-logs/download/",
                  "pk": "system-logs",
                  "resource_uri": "/api/v1/debug/system-logs/",
                  "datemodified": "2020-03-19T15:07:42.633247+09:00",
                  "size": 125289232
                }

/api/v1/profile/:
  is: [basicAuth]
  get:
    responses:
      200:
        body:
          application/json:

/api/v1/ui/:
  is: [basicAuth]
  get:
    responses:
      200:
        body:
          application/json:

  post:
    is: [csrfToken]
    responses:
      200:
        body:
          application/json:

/api/v1/task:
  is: [basicAuth]
  /:
    get:
      responses:
        200:
          body:
            application/json:
    post:
      is: [csrfToken]
      responses:
        201:
          body:
            application/json:
  /{pk}/:
    get:
      responses:
        200:
          body:
            application/json:
    put:
      is: [csrfToken]
      responses:
        202:
          body:
            application/json:
    delete:
      is: [csrfToken]
      responses:
        204:

/api/v1/job:
  is: [basicAuth]
  /:
    get:
      responses:
        200:
          body:
            application/json:
    post:
      is: [csrfToken]
      responses:
        201:
          body:
            application/json:
  /{pk}/:
    get:
      responses:
        200:
          body:
            application/json:
    put:
      is: [csrfToken]
      responses:
        202:
          body:
            application/json:
    delete:
      is: [csrfToken]
      responses:
        204:

/api/v1/planningresult:
  is: [basicAuth]
  /:
    get:
      responses:
        200:
          body:
            application/json:
    post:
      is: [csrfToken]
      responses:
        201:
          body:
            application/json:
  /{pk}/:
    get:
      responses:
        200:
          body:
            application/json:
    put:
      is: [csrfToken]
      responses:
        202:
          body:
            application/json:
    delete:
      is: [csrfToken]
      responses:
        204:

/api/v1/binpickingresult:
  is: [basicAuth]
  /:
    get:
      responses:
        200:
          body:
            application/json:
    post:
      is: [csrfToken]
      responses:
        201:
          body:
            application/json:
  /{pk}/:
    get:
      responses:
        200:
          body:
            application/json:
    put:
      is: [csrfToken]
      responses:
        202:
          body:
            application/json:
    delete:
      is: [csrfToken]
      responses:
        204:

/api/v1/controllerState:
  is: [basicAuth]
  /:
    get:
      responses:
        200:
          body:
            application/json:
    post:
      is: [csrfToken]
      responses:
        201:
          body:
            application/json:
  /{pk}/:
    get:
      responses:
        200:
          body:
            application/json:
    put:
      is: [csrfToken]
      responses:
        202:
          body:
            application/json:
    delete:
      is: [csrfToken]
      responses:
        204:

/api/v1/cycleLog:
  is: [basicAuth]
  /:
    get:
      responses:
        200:
          body:
            application/json:
    post:
      is: [csrfToken]
      responses:
        201:
          body:
            application/json:
  /{pk}/:
    get:
      responses:
        200:
          body:
            application/json:
    put:
      is: [csrfToken]
      responses:
        202:
          body:
            application/json:
    delete:
      is: [csrfToken]
      responses:
        204:

/api/v1/itl:
  is: [basicAuth]
  /:
    get:
      responses:
        200:
          body:
            application/json:
    post:
      is: [csrfToken]
      responses:
        201:
          body:
            application/json:
  /{pk}/:
    get:
      responses:
        200:
          body:
            application/json:
    put:
      is: [csrfToken]
      responses:
        202:
          body:
            application/json:
    delete:
      is: [csrfToken]
      responses:
        204:

/api/v1/scene:
  /:
    type:
      CollectionListResource:
        resourceSchema: SceneResourceResponse
        minimumParametersList: "[name]. "
  /{scenepk}/:
    type:
      CollectionItemResource:
        resourceSchema: SceneResourceResponse

/api/v1/scene/{scenepk}/instobject:
  description: |
    This endpoint contains all of the instance objects in the scene. Instance objects can either be kinetic bodies, e.g. containers, workpieces, or robots.
    Instance objects are instantiated from object templates and contain additional properties to differentiate instance objects from the same template.
    For example, robots instantiated from the same robot template may have differing base transforms from the origin that indicate robot base position.
    Refer to /object/{objectpk} documentation for more information on templates.
  type:
    CollectionListResource:
      resourceSchema: InstObjectResource
      minimumParametersList: "[name, type]. "
  /{instobjectpk}/:
    type:
      CollectionItemResource:
        resourceSchema: InstObjectResource

/api/v1/scene/{scenepk}/instobject/{instobjectpk}/tool:
  description: |
    This endpoint contains the tools of the object (robot). Instance object should be a robot to perform CRUD operations on this resource endpoint.
    Tools are instantiated from robot tools. See /robot/{robotpk} documentation for more information on tool templates. Instantiated tools are primarily used to fine-tune the positon of the robot end-effector (TODO: double-check correctness of statement).
  type:
    CollectionListResource:
      resourceSchema: InstObjectToolResource
      minimumParametersList: "[name]. "
  /{toolpk}/:
    type:
      CollectionItemResource:
        resourceSchema: InstObjectToolResource

/api/v1/object/{objectpk}:
  description: |
    This endpoint contains the template of an object, i.e. a kinematic body such as a container or workpiece from which instance objects are created.
    Templates contain all of the attributes, i.e. properties, common to all instance objects.
    Note that templates cannot be directly created. Templates are automatically generated when creating a instance object that does not refer to an existing template.
  type:
    ReadModifyOnlyItemResource:
      resourceSchema: ObjectResource

/api/v1/object/{objectpk}/link:
  description: |
    This endpoint contains the links of an object. Links are frame transformations that define the positions of components relative to parent components.
  type:
    CollectionListResource:
      resourceSchema: LinkResource
      minimumParametersList: "[name, parentlink]. "
  /{linkpk}/:
    type:
      CollectionItemResource:
        resourceSchema: LinkResource

/api/v1/object/{objectpk}/attachment:
  description: |
    This endpoint contains the attachments of an object. Attachments can be linear, revolute joints and are used to define the relationship between links.
    (TODO: double-check correctness of statement).
  type:
    CollectionListResource:
      resourceSchema: AttachmentResource
      minimumParametersList: "[name]. "
  /{attachmentpk}/:
    type:
      CollectionItemResource:
        resourceSchema: AttachmentResource

/api/v1/object/{objectpk}/geometry:
  description: |
    This endpoint contains the geometries of an object. Geometries are component geometries. Links and attachments define the position, and geometries define the shape of the components, e.g. robot arms.
  type:
    CollectionListResource:
      resourceSchema: GeometryResource
      minimumParametersList: "[name]. "
  /{geometrypk}/:
    type:
      CollectionItemResource:
        resourceSchema: GeometryResource
    
/api/v1/object/{objectpk}/ikparam:
  description: |
    This endpoint contains the inverse kinematics parameters of an object that define the position of the robot end-manipulator, i.e. tool, when grabbing the object.
  type: 
    CollectionListResource:
      resourceSchema: IkParamResource
      minimumParametersList: "[name]. "
  /{ikparampk}/:
    type:
      CollectionItemResource:
        resourceSchema: IkParamResource

/api/v1/object/{objectpk}/graspset:
  description: |
    This endpoint contains the set of inverse kinematics parameters used to grab the object.
  type:
    CollectionListResource:
      resourceSchema: GraspsetResource
      minimumParametersList: "[name]. "
  /{graspsetpk}/:
    type:
      CollectionItemResource:
        resourceSchema: GraspsetResource
    
/api/v1/robot/{robotpk}/:
  description: |
    This endpoint contains the template of a robot. Robot template inherits from object template and thus also has the same endpoints as /object template,
    e.g. /links, /attachments, /geometries, etc. Also note that this also means that robot template cannot be directly created.
  type:
    ReadModifyOnlyItemResource:
      resourceSchema: RobotResource
    
/api/v1/robot/{robotpk}/tool:
  description: |
    This endpoint contains the tools of a robot. Tools are frame transformations from the robot arm endpoint to the tool manipulator tip. Instanace tools are instantiated from robot tool templates (TODO: double-check correctness of statement).
  type:
    CollectionListResource:
      resourceSchema: ToolResource
      minimumParametersList: "[name]. "
  /{toolpk}/:
    type:
      CollectionItemResource:
        resourceSchema: ToolResource

/api/v1/robot/{robotpk}/attachedsensor:
  description: |
    This endpoint contains all sensors of the robot (TODO: expand on explanation).
  type:
    CollectionListResource:
      resourceSchema: AttachedSensorResource
      minimumParametersList: "[name]. "
  /{attachedsensorpk}/:
    type:
      CollectionItemResource:
        resourceSchema: AttachedSensorResource